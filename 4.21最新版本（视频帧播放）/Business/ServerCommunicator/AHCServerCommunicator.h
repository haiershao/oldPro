//
//  AHCServerCommunicator.h
//  AtHomeCam
//
//  Created by Circlely Networks on 4/3/14.
//
//

#import <Foundation/Foundation.h>

//The key of the CIDInfo -(void)subscribeCID:(NSDictionary*)CIDInfo
extern NSString *const kCIDInfoNumber;
extern NSString *const kCIDInfoPassword;
extern NSString *const kCIDInfoUsername;

extern NSString *const kPeerOnlineState; //0 offline 1 online 2 sleep 3 password wrong but online 4 unknown

//For return data
extern NSString *const kMediaCmdParamSnapshot;
//For send data
extern NSString *const kMediaCmdParamCamIndex;
extern NSString *const kMediaCmdParamCamImageType;
extern NSString *const kMediaCmdName;
extern NSString *const kMediaCmdParamVideFileName;
extern NSString *const kMediaCmdParamFetchImageType;
extern NSString *const kMediaCmdParamRecordType;




typedef void* CHANNEL_HANDLE;

//#define SOFT_TYPE SOFTTYPE_ATHOMEVIEWER_IOS_CN

/*
 E_RVS_STREAMER_STATE_INIT     = 0,
 E_RVS_STREAMER_STATE_INFOGETING,
 E_RVS_STREAMER_STATE_INFOGETSUCCESS,
 E_RVS_STREAMER_STATE_INFOGETERR_NOTEXIST,
 E_RVS_STREAMER_STATE_INFOGETERR_APPNOTSUPPORT,
 E_RVS_STREAMER_STATE_INFOGETERR_VERSIONNEEDUPDATE,
 E_RVS_STREAMER_STATE_INFOGETERR_VERSIONNOTSUPPORT,
 E_RVS_STREAMER_STATE_INFOGETERR,
 
 E_RVS_STREAMER_STATE_UNKNOWN,
 E_RVS_STREAMER_STATE_ONLINE,
 E_RVS_STREAMER_STATE_OFFLINE,
 E_RVS_STREAMER_STATE_ERRUSERPWD,
 
 E_RVS_STREAMER_CONNECTING,
 E_RVS_STREAMER_CONNECTED,
 E_RVS_STREAMER_CONNECT_ERROR
 */


typedef enum {
    PEER_STATUS_STATE_INIT          = E_RVS_STREAMER_PRESENCE_STATE_INIT,
    PEER_STATUS_STATE_ONLINE        = E_RVS_STREAMER_PRESENCE_STATE_ONLINE,
    PEER_STATUS_STATE_OFFLINE       = E_RVS_STREAMER_PRESENCE_STATE_OFFLINE,
    PEER_STATUS_STATE_ERRUSERPWD    = E_RVS_STREAMER_PRESENCE_STATE_ERRUSERPWD,
    PEER_STATUS_STATE_UNKNOWN
} PEER_STATUS_STATE;

typedef enum
{
    STREAMER_CONF_STATE_INIT                            = E_RVS_STREAMER_CONF_STATE_INIT,
    STREAMER_CONF_STATE_INFOGETING                      = E_RVS_STREAMER_CONF_STATE_INFOGETING,
    STREAMER_CONF_STATE_INFOGETSUCCESS                  = E_RVS_STREAMER_CONF_STATE_INFOGETSUCCESS,
    STREAMER_CONF_STATE_INFOGETERR_NOTEXIST             = E_RVS_STREAMER_CONF_STATE_INFOGETERR_NOTEXIST,
    STREAMER_CONF_STATE_INFOGETERR_APPNOTSUPPORT        = E_RVS_STREAMER_CONF_STATE_INFOGETERR_APPNOTSUPPORT,
    STREAMER_CONF_STATE_INFOGETERR_VERSIONNEEDUPDATE    = E_RVS_STREAMER_CONF_STATE_INFOGETERR_VERSIONNEEDUPDATE,
    STREAMER_CONF_STATE_INFOGETERR_VERSIONNOTSUPPORT    = E_RVS_STREAMER_CONF_STATE_INFOGETERR_VERSIONNOTSUPPORT,
    STREAMER_CONF_STATE_INFOGETERR                      = E_RVS_STREAMER_CONF_STATE_INFOGETERR
}STREAMER_CONF_STATE;

typedef enum
{
    STREAMER_CONN_STATE_INIT            = E_RVS_STREAMER_CONN_STATE_INIT,
    STREAMER_CONN_STATE_CONNECTING      = E_RVS_STREAMER_CONN_STATE_CONNECTING,
    STREAMER_CONN_STATE_CONNECTED       = E_RVS_STREAMER_CONN_STATE_CONNECTED,
    STREAMER_CONN_STATE_CONNECT_ERROR   = E_RVS_STREAMER_CONN_STATE_CONNECT_ERROR
}STREAMER_CONN_STATE;



typedef enum {
    SERVER_CONNECT_STATUS_INIT                  = E_RVS_VIEWER_LOGIN_STATE_IDLE,
    SERVER_CONNECT_STATUS_CONNECTING            = E_RVS_VIEWER_LOGIN_STATE_CONNING,
    SERVER_CONNECT_STATUS_CONNED                = E_RVS_VIEWER_LOGIN_STATE_CONNED,
    SERVER_CONNECT_STATUS_DISCONNED             = E_RVS_VIEWER_LOGIN_STATE_DISCONNED,

} SERVER_CONNECT_STATUS;



typedef enum {
    SERVER_CONNECT_PROGRESS_INIT = E_RVS_VIEWER_LOGIN_PROGRESS_INIT,
    SERVER_CONNECT_PROGRESS_SERVICEGET =  E_RVS_VIEWER_LOGIN_PROGRESS_SERVICEGET,
    SERVER_CONNECT_PROGRESS_SERVICEGETTED =  E_RVS_VIEWER_LOGIN_PROGRESS_SERVICEGETTED,
    SERVER_CONNECT_PROGRESS_AUTHING  =  E_RVS_VIEWER_LOGIN_PROGRESS_AUTHING,
    SERVER_CONNECT_PROGRESS_AUTHED = E_RVS_VIEWER_LOGIN_PROGRESS_AUTHED,
    SERVER_CONNECT_PROGRESS_CONNECTING = E_RVS_VIEWER_LOGIN_PROGRESS_CONNECTING,
    SERVER_CONNECT_PROGRESS_CONNECTED = E_RVS_VIEWER_LOGIN_PROGRESS_CONNECTED,
    SERVER_CONNECT_PROGRESS_REGISTING = E_RVS_VIEWER_LOGIN_PROGRESS_REGISTING,
    SERVER_CONNECT_PROGRESS_REGISTED = E_RVS_VIEWER_LOGIN_PROGRESS_REGISTED,
    SERVER_CONNECT_PROGRESS_ALLOCATING = E_RVS_VIEWER_LOGIN_PROGRESS_ALLOCATING,
    SERVER_CONNECT_PROGRESS_ALLOCATED = E_RVS_VIEWER_LOGIN_PROGRESS_ALLOCATED,
    SERVER_CONNECT_PROGRESS_GETSYSCONFIG = E_RVS_VIEWER_LOGIN_PROGRESS_GETSYSCONFIG,
    SERVER_CONNECT_PROGRESS_UPLOADINFO = E_RVS_VIEWER_LOGIN_PROGRESS_UPLOADINFO,
    SERVER_CONNECT_PROGRESS_STARTBUSSINESS = E_RVS_VIEWER_LOGIN_PROGRESS_STARTSERVICES,
    SERVER_CONNECT_PROGRESS_STARTED = E_RVS_VIEWER_LOGIN_PROGRESS_STARTED
}
SERVER_CONNECT_PROGRESS;

typedef enum
{
    SERVER_CONNECT_NO_ERR            = E_RVS_VIEWER_LOGIN_ERR_NOERR,
    SERVER_CONNECT_SERVICEGET_ERR    = E_RVS_VIEWER_LOGIN_ERR_SERVICEGETERR,
    SERVER_CONNECT_COMPANYINFO_ERR   = E_RVS_VIEWER_LOGIN_ERR_AUTH_ERRCOMPANYINFO,
    SERVER_CONNECT_APPID_ERR         = E_RVS_VIEWER_LOGIN_ERR_AUTH_ERRAPPID,

    SERVER_CONNECT_LICENSE_ERR       = E_RVS_VIEWER_LOGIN_ERR_AUTH_ERRLICENSE,
    SERVER_CONNECT_FULLLICENSE_ERR   = E_RVS_VIEWER_LOGIN_ERR_AUTH_FULLLICENSE,
    SERVER_CONNECT_TIMEOUT_ERR       = E_RVS_VIEWER_LOGIN_ERR_AUTH_TIMEOUT,
    SERVER_CONNECT_CONNECT_ERR       = E_RVS_VIEWER_LOGIN_ERR_CONNECT_ERR,
    SERVER_CONNECT_REGISTER_ERR      = E_RVS_VIEWER_LOGIN_ERR_REGISTER_ERR,
    SERVER_CONNECT_ALLOCATE_ERR      = E_RVS_VIEWER_LOGIN_ERR_ALLOCATE_ERR,
    SERVER_CONNECT_GETSYSCONFIG_ERR  = E_RVS_VIEWER_LOGIN_ERR_GETSYSCONFIG_ERR,
    SERVER_CONNECT_UPLOADINFO_ERR    = E_RVS_VIEWER_LOGIN_ERR_UPLOADINFO_ERR,
    SERVER_CONNECT_CONNECT_INTERUPT  = E_RVS_VIEWER_LOGIN_ERR_CONNECT_INTERUPT,
    SERVER_CONNECT_ERR_DEFAULT       = E_RVS_VIEWER_LOGIN_ERR_DEFAULT

}
SERVER_CONNECT_ERRCODE;



typedef enum {
    
    MEDIA_STREAM_STATE_CREATED = EN_RVS_MEDIASTREAM_STATE_CREATED,
    MEDIAS_TREAM_STATE_CLOSED   = EN_RVS_MEDIASTREAM_STATE_CLOSED
    
}
MEDIA_STREAM_STATE;

typedef enum {
    MEDIA_STREAM_FLAG_NOERR          = 0,
    MEDIA_STREAM_FLAG_SERVICE_NOTSUPPORT,
    MEDIA_STREAM_FLAG_VERSION_NOTSUPPORT,
    MEDIA_STREAM_FLAG_SERVICE_FULL,
    MEDIA_STREAM_FLAG_VERSION_NEEDUPDATE,
    MEDIA_STREAM_FLAG_SERVICE_ERR,
}
MEDIA_STREAM_ERRORCODE;


typedef enum {
    COMMAND_ERROR_REQUEST_FAILED  = 0xFE,
    COMMAND_ERROR_REQUEST_TIMEOUT = 0xFF
} COMMAND_ERROR_TYPE;

typedef enum
{
    STREAMER_ALARM_LEVEL_NONE = EN_RVS_STREAMER_ALARM_LEVEL_NONE,        //NONE
    STREAMER_ALARM_LEVEL_HIGH = EN_RVS_STREAMER_ALARM_LEVEL_HIGH,        //HIGH
    STREAMER_ALARM_LEVEL_MEDIUM = EN_RVS_STREAMER_ALARM_LEVEL_MEDIUM,    //MEDIUM
    STREAMER_ALARM_LEVEL_LOW = EN_RVS_STREAMER_ALARM_LEVEL_LOW,          //LOW
    STREAMER_ALARM_LEVEL_MAX = EN_RVS_STREAMER_ALARM_LEVEL_MAX           //MAX
    
}STREAMER_MOTION_LEVEL;



typedef enum {

	E_FETCH_SNAPSHOT = 0,
	
	E_FETCH_VIDE_FILE_ICON

}MediaCmdParamFetchImageType;//用于获取区分图片时是用于获取实时抓图还是获取录像片 kMediaCmdParamFetchImageType : E_FETCH_SNAPSHOT


typedef enum
{
    STREAMER_RECORD_TYPE_SCHEDULE = EN_RVS_RECORD_TYPE_SCHEDULE,
    STREAMER_RECORD_TYPE_MOTION = EN_RVS_RECORD_TYPE_MOTION,
    STREAMER_RECORD_TYPE_TIMELAPSE = EN_RVS_RECORD_TYPE_TIMELAPSE,
    
    
    STREAMER_RECORD_TYPE_LOCK = EN_RVS_RECORD_TYPE_CUSTOMUSER1,
    STREAMER_RECORD_TYPE_UNLOCK = EN_RVS_RECORD_TYPE_CUSTOMUSER2,
    STREAMER_RECORD_TYPE_CUSTOMUSER3 = EN_RVS_RECORD_TYPE_CUSTOMUSER3,
    STREAMER_RECORD_TYPE_CUSTOMUSER4 = EN_RVS_RECORD_TYPE_CUSTOMUSER4
    
}STREAMER_RECORD_TYPE;



typedef enum {
    STREAMER_CLOUD_NOERR                          = EN_RVS_CLOUD_NOERR,
    STREAMER_CLOUD_ERROR_CONFIG                   = EN_RVS_CLOUD_ERROR_CONFIG,
    STREAMER_CLOUD_ERROR_REQ                      = EN_RVS_CLOUD_ERROR_REQ,
    STREAMER_CLOUD_ERROR_RECV                     = EN_RVS_CLOUD_ERROR_RECV,
    STREAMER_CLOUD_ERROR_MALLOC                   = EN_RVS_CLOUD_ERROR_MALLOC,
    STREAMER_CLOUD_ERROR_SERVER_PARM              = EN_RVS_CLOUD_ERROR_SERVER_PARM,
    STREAMER_CLOUD_ERROR_SERVER_AUTHORIZATION     = EN_RVS_CLOUD_ERROR_SERVER_AUTHORIZATION,
    STREAMER_CLOUD_ERROR_SERVER_ERROR             = EN_RVS_CLOUD_ERROR_SERVER_ERROR,
    STREAMER_CLOUD_ERROR_OTHER                    = EN_RVS_CLOUD_ERROR_OTHER,
    STREAMER_CLOUD_ERROR_HAS_NO_DATA_UPLOADED     = EN_RVS_CLOUD_ERROR_HAS_NO_DATA_UPLOADED
    
}STREAMER_CLOUD_ERROR_CODE;


@protocol AHCServerCommunicatorDelegate <NSObject>

@optional
//client 与server之间通信状态变化通知
-(void) onRecieveConnectServerStatusChanged:(SERVER_CONNECT_STATUS) status;
//采集端 上下线通知
-(void) onRecievePeerStatusChanged:(NSString*)peerCID withStatus:(NSDictionary*)statusInfo;
//采集端 配置获取通知
-(void) onCfgGetSuc:(NSString*)peerCID;

//client与采集端 连接状态变化通知
-(void) onRecieveStreamerStateChanged:(NSString*)peerCID withState:(STREAMER_CONN_STATE)state;

@end




@protocol AHCLanSearchDelegate <NSObject>

- (void)onLanSearchStreamer:(unsigned long long)streamerCID
               StreamerName:(NSString*)streamerName
                     OSType:(NSUInteger)osType;

@end


typedef unsigned long long COMMAND_HANDLER;
typedef void (^PeerCommandFinished)(NSDictionary* returnValue);
typedef void (^PeerCommandFailed)(COMMAND_ERROR_TYPE ErrorCode);

@interface AHCServerCommunicator : NSObject



+ (AHCServerCommunicator *)sharedAHCServerCommunicator;
+ (NSNumber*)localCID;



- (void)start;
- (void)stop;

- (void)loadLocalCIDConfigFromSDK;
- (void)refreshAllCIDStatus;

- (void)subscribeCID:(NSDictionary*)CIDInfo;
- (void)resubscribeCID:(NSDictionary*)CIDInfo; //This method will call unsubscibeCID firstly
- (void)unsubscribeCID:(NSDictionary*)CIDInfo;


-(void) onCommandFinished:(NSDictionary*)returnValue cmdIdentity:(NSNumber*)identity;
-(void) onCommandFailed:(NSInteger)ErrorCode peerCID:(NSString*)peerCID;

#pragma mark - cmd
- (void)addObserver:(NSObject<AHCServerCommunicatorDelegate>*)observer;
- (void)addObserver:(NSObject<AHCServerCommunicatorDelegate>*)observer forCID:(NSString*)CIDNumber;
- (void)removeObserver:(NSObject<AHCServerCommunicatorDelegate>*)observer;
- (COMMAND_HANDLER)sendCommandToPeer:(NSString*)peerID
                             cmdName:(NSString*)cmdName
                            cmdParam:(NSDictionary*) cmdParam
                             timeout:(NSTimeInterval)timeinterval
                     completionBlock:(PeerCommandFinished) completionBlock
                         failedBlock:(PeerCommandFailed) failedBlock;
- (void)cancelCommand:(COMMAND_HANDLER)handler;


#pragma mark - lansearch

- (NSInteger)startLANSearchStreamer;
- (NSInteger)stopLANSearchStreamer;

@property (nonatomic, assign) id<AHCLanSearchDelegate> lanSearchDelegate;

#pragma mark - adjudge in same LAN
- (BOOL)isInSameLanWithStreamer:(unsigned long long)streamerCID;

- (int)getSessionState:(unsigned long long)streamerCID;

//new api

@end
